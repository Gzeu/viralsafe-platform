name: ViralSafe Uptime Monitor

on:
  schedule:
    - cron: '*/5 * * * *'  # Every 5 minutes
  workflow_dispatch:
  push:
    branches: [main]
    paths: ['.github/workflows/uptime-monitor.yml']

env:
  TIMEZONE: 'Europe/Bucharest'

jobs:
  uptime-check:
    runs-on: ubuntu-latest
    name: Check ViralSafe Platform Health
    
    steps:
      - name: Check GitHub Pages
        id: github-pages
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://gzeu.github.io/viralsafe-platform/ || echo "000")
          if [ "$STATUS" = "200" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ GitHub Pages: Online (Status: $STATUS)"
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "‚ùå GitHub Pages: Offline (Status: $STATUS)"
            exit 1
          fi
          
      - name: Check Vercel Frontend
        id: vercel-frontend
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://viralsafe-platform-deploy-git-main-gzeus-projects.vercel.app/ || echo "000")
          if [ "$STATUS" = "200" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Vercel Frontend: Online (Status: $STATUS)"
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "‚ùå Vercel Frontend: Offline (Status: $STATUS)"
            exit 1
          fi
          
      - name: Check Render Backend
        id: render-backend
        continue-on-error: true
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://viralsafe-backend.onrender.com/health || echo "000")
          if [ "$STATUS" = "200" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Render Backend: Online (Status: $STATUS)"
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Render Backend: Offline (Status: $STATUS) - Expected during setup"
          fi
          
      - name: Create Issue on Frontend Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üö® ViralSafe Platform Alert - ${new Date().toISOString().split('T')[0]}`;
            const timestamp = new Date().toLocaleString('ro-RO', { timeZone: 'Europe/Bucharest' });
            
            let body = `# ViralSafe Platform Health Alert\n\n`;
            body += `**Alert Time**: ${timestamp} (Bucharest Time)\n\n`;
            body += `## Critical Services Down\n\n`;
            
            if ('${{ steps.github-pages.outcome }}' === 'failure') {
              body += `‚ùå **GitHub Pages**: OFFLINE\n`;
              body += `- URL: https://gzeu.github.io/viralsafe-platform/\n\n`;
            }
            
            if ('${{ steps.vercel-frontend.outcome }}' === 'failure') {
              body += `‚ùå **Vercel Frontend**: OFFLINE\n`;
              body += `- URL: https://viralsafe-platform-deploy-git-main-gzeus-projects.vercel.app/\n\n`;
            }
            
            body += `## Actions Required\n\n`;
            body += `1. Check Vercel dashboard for deployment issues\n`;
            body += `2. Check GitHub Pages settings and build status\n`;
            body += `3. Review recent commits for breaking changes\n\n`;
            body += `*This alert was generated automatically. Check again in 5 minutes.*`;
            
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'uptime-alert'
            });
            
            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['uptime-alert', 'critical']
              });
            }
            
      - name: Close Issues on Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'uptime-alert'
            });
            
            for (const issue of issues.data) {
              const timestamp = new Date().toLocaleString('ro-RO', { timeZone: 'Europe/Bucharest' });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `‚úÖ **Services Restored** - ${timestamp}\n\nAll frontend services are operational.`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }