name: Smart Contracts CI/CD

on:
  push:
    branches: [main, develop]
    paths: ['contracts/**']
  pull_request:
    branches: [main]
    paths: ['contracts/**']
    
env:
  NODE_VERSION: '18'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: contracts/package-lock.json
          
      - name: Install dependencies
        working-directory: ./contracts
        run: npm ci
        
      - name: Run Solidity linter
        working-directory: ./contracts
        run: npx solhint 'contracts/**/*.sol'
        
      - name: Compile contracts
        working-directory: ./contracts
        run: npx hardhat compile
        
      - name: Run tests
        working-directory: ./contracts
        run: npx hardhat test
        
      - name: Run coverage
        working-directory: ./contracts
        run: npx hardhat coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./contracts/coverage/lcov.info
          directory: ./contracts/coverage/
          flags: smart-contracts

  gas-report:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: contracts/package-lock.json
          
      - name: Install dependencies
        working-directory: ./contracts
        run: npm ci
        
      - name: Run gas report
        working-directory: ./contracts
        run: npx hardhat test --gas-report > gas-report.txt
        env:
          REPORT_GAS: true
          
      - name: Comment gas report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const gasReport = fs.readFileSync('./contracts/gas-report.txt', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## â›½ Gas Usage Report\n\n\`\`\`\n${gasReport}\n\`\`\``
            });

  deploy-testnet:
    runs-on: ubuntu-latest
    needs: [lint-and-test, gas-report]
    if: github.ref == 'refs/heads/develop'
    environment: testnet
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: contracts/package-lock.json
          
      - name: Install dependencies
        working-directory: ./contracts
        run: npm ci
        
      - name: Deploy to BSC Testnet
        working-directory: ./contracts
        run: npx hardhat run scripts/deploy.js --network bscTestnet
        env:
          PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
          BSC_TESTNET_RPC_URL: ${{ secrets.BSC_TESTNET_RPC_URL }}
          BSCSCAN_API_KEY: ${{ secrets.BSCSCAN_API_KEY }}
          
      - name: Verify contracts on BSCScan
        working-directory: ./contracts
        run: |
          # Wait for deployment to be confirmed
          sleep 30
          
          # Read deployment addresses and verify
          if [ -f deployments/bscTestnet/SAFEToken.json ]; then
            SAFE_ADDRESS=$(cat deployments/bscTestnet/SAFEToken.json | jq -r .address)
            npx hardhat verify --network bscTestnet $SAFE_ADDRESS
          fi
          
          if [ -f deployments/bscTestnet/ViralNFT.json ]; then
            NFT_ADDRESS=$(cat deployments/bscTestnet/ViralNFT.json | jq -r .address)
            SAFE_ADDRESS=$(cat deployments/bscTestnet/SAFEToken.json | jq -r .address)
            npx hardhat verify --network bscTestnet $NFT_ADDRESS $SAFE_ADDRESS
          fi
        env:
          BSCSCAN_API_KEY: ${{ secrets.BSCSCAN_API_KEY }}
        continue-on-error: true
        
      - name: Commit updated addresses
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add contracts/deployments/
          git diff --staged --quiet || git commit -m "ðŸš€ Update contract addresses after testnet deployment"
          git push

  deploy-mainnet:
    runs-on: ubuntu-latest
    needs: [lint-and-test, gas-report]
    if: github.ref == 'refs/heads/main'
    environment: mainnet
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: contracts/package-lock.json
          
      - name: Install dependencies
        working-directory: ./contracts
        run: npm ci
        
      - name: Deploy to BSC Mainnet
        working-directory: ./contracts
        run: npx hardhat run scripts/deploy.js --network bsc
        env:
          PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
          BSC_RPC_URL: ${{ secrets.BSC_RPC_URL }}
          BSCSCAN_API_KEY: ${{ secrets.BSCSCAN_API_KEY }}
          
      - name: Verify contracts on BSCScan
        working-directory: ./contracts
        run: |
          # Wait for deployment to be confirmed
          sleep 60
          
          # Read deployment addresses and verify
          if [ -f deployments/bsc/SAFEToken.json ]; then
            SAFE_ADDRESS=$(cat deployments/bsc/SAFEToken.json | jq -r .address)
            npx hardhat verify --network bsc $SAFE_ADDRESS
          fi
          
          if [ -f deployments/bsc/ViralNFT.json ]; then
            NFT_ADDRESS=$(cat deployments/bsc/ViralNFT.json | jq -r .address)
            SAFE_ADDRESS=$(cat deployments/bsc/SAFEToken.json | jq -r .address)
            npx hardhat verify --network bsc $NFT_ADDRESS $SAFE_ADDRESS
          fi
        env:
          BSCSCAN_API_KEY: ${{ secrets.BSCSCAN_API_KEY }}
        continue-on-error: true

  security-analysis:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Run Slither analysis
        uses: crytic/slither-action@v0.3.0
        with:
          target: contracts/
          slither-args: --print human-summary
          
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            slither-report.json